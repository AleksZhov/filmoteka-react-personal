{"version":3,"file":"static/js/186.c630011b.chunk.js","mappings":"yNAiCA,UA7BA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAe,mCAAG,oGACDC,EAAAA,EAAAA,gBAA2BN,GAD1B,OAChBO,EADgB,OAEtBH,EAAcG,EAAOC,SAFC,2CAAH,qDASrB,OALAC,EAAAA,EAAAA,YAAU,WACRJ,GAED,GAAE,KAGD,+BACyB,IAAtBF,EAAWO,SACV,sEAEF,wBACGP,EAAWQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACd,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADK,QASvB,C,qFC/BKG,EAAU,mCACVC,EAAU,gCAEHV,EAAa,CACxBW,kBAAkB,WAAD,wBAAE,WAAMC,GAAN,kGAEQC,MAAM,GAAD,OACvBH,EADuB,oCACYD,IAHzB,WAETK,EAFS,QAKDC,GALC,sBAMP,IAAIC,MAAMF,EAASG,QANZ,uBAQMH,EAASI,OARf,cAQTC,EARS,yBASRA,GATQ,kCAWfP,EAAS,KAAMQ,SAXA,0DAAF,mDAAC,GAelBC,0BAA0B,WAAD,wBAAE,WAAOC,EAAOV,GAAd,kGAEAC,MAAM,GAAD,OACvBH,EADuB,gCACQD,EADR,kBACyBa,EADzB,yDAFL,WAEjBR,EAFiB,QAKTC,GALS,sBAMf,IAAIC,MAAMF,EAASG,QANJ,uBAQFH,EAASI,OARP,cAQjBC,EARiB,yBAShBA,GATgB,kCAWvBP,EAAS,KAAMQ,SAXQ,0DAAF,qDAAC,GAe1BG,gBAAgB,WAAD,wBAAE,WAAOjB,EAAIM,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPJ,EADO,oBACOG,EADP,oBAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQOH,EAASI,OARhB,cAQPM,EARO,yBASNA,GATM,kCAWbZ,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,GAchBK,gBAAgB,WAAD,wBAAE,WAAOnB,EAAIM,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPJ,EADO,4BACeG,EADf,oBAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQQH,EAASI,OARjB,cAQPC,EARO,yBASNA,GATM,kCAWbP,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,GAchBrB,gBAAgB,WAAD,wBAAE,WAAOO,EAAIM,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPJ,EADO,4BACeG,EADf,2BAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQQH,EAASI,OARjB,cAQPC,EARO,yBASNA,GATM,kCAWbP,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,G","sources":["components/Reviews/Reviews.jsx","components/services/APIservice.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { APIservise } from 'components/services/APIservice';\n\nfunction Reviews() {\n  const { movieId } = useParams();\n  const [reviewList, setReviewList] = useState([]);\n  const getMovieReviews = async () => {\n    const result = await APIservise.getMovieReviews(movieId);\n    setReviewList(result.results);\n  };\n  useEffect(() => {\n    getMovieReviews();\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <section>\n      {reviewList.length === 0 && (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n      <ul>\n        {reviewList.map(({ id, author, content }) => (\n          <li key={id}>\n            <h2>Author: {author}</h2>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nexport default Reviews;\n","const API_KEY = 'ea236f9607da5e1c117233fca3100ef0';\nconst API_URL = 'https://api.themoviedb.org/3/';\n\nexport const APIservise = {\n  getTrendingMovies: async setError => {\n    try {\n      const response = await fetch(\n        `${API_URL}trending/all/day?api_key=${API_KEY}`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  searchMovieByQueryAndPage: async (query, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false&year=2001`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  getMovieDetails: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movie = await response.json();\n      return movie;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieCredits: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieReviews: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n};\n"],"names":["movieId","useParams","useState","reviewList","setReviewList","getMovieReviews","APIservise","result","results","useEffect","length","map","id","author","content","API_KEY","API_URL","getTrendingMovies","setError","fetch","response","ok","Error","status","json","movies","message","searchMovieByQueryAndPage","query","getMovieDetails","movie","getMovieCredits"],"sourceRoot":""}