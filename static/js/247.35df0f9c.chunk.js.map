{"version":3,"file":"static/js/247.35df0f9c.chunk.js","mappings":"yNAsCA,UAlCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,mCAAG,oGACEC,EAAAA,EAAAA,gBAA2BN,GAD7B,OACbO,EADa,OAEnBH,EAAYG,EAAOC,MAFA,2CAAH,qDAQlB,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,GAED,GAAE,KAED,+BACuB,IAApBF,EAASO,SACR,2EAEF,wBACGP,EAASQ,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACZ,2BACE,gBACEC,IAAG,yCAAoCH,GACvCI,IAAKH,EACLI,MAAM,SAER,uBAAIJ,KACJ,yCAAiBC,OAPVH,EADG,QAcrB,C,qFCpCKO,EAAU,mCACVC,EAAU,gCAEHd,EAAa,CACxBe,kBAAkB,WAAD,wBAAE,WAAMC,GAAN,kGAEQC,MAAM,GAAD,OACvBH,EADuB,oCACYD,IAHzB,WAETK,EAFS,QAKDC,GALC,sBAMP,IAAIC,MAAMF,EAASG,QANZ,uBAQMH,EAASI,OARf,cAQTC,EARS,yBASRA,GATQ,kCAWfP,EAAS,KAAMQ,SAXA,0DAAF,mDAAC,GAelBC,0BAA0B,WAAD,wBAAE,WAAOC,EAAOV,GAAd,kGAEAC,MAAM,GAAD,OACvBH,EADuB,gCACQD,EADR,kBACyBa,EADzB,yDAFL,WAEjBR,EAFiB,QAKTC,GALS,sBAMf,IAAIC,MAAMF,EAASG,QANJ,uBAQFH,EAASI,OARP,cAQjBC,EARiB,yBAShBA,GATgB,kCAWvBP,EAAS,KAAMQ,SAXQ,0DAAF,qDAAC,GAe1BG,gBAAgB,WAAD,wBAAE,WAAOC,EAAIZ,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPc,EADO,oBACOf,EADP,oBAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQOH,EAASI,OARhB,cAQPO,EARO,yBASNA,GATM,kCAWbb,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,GAchBM,gBAAgB,WAAD,wBAAE,WAAOF,EAAIZ,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPc,EADO,4BACef,EADf,oBAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQQH,EAASI,OARjB,cAQPC,EARO,yBASNA,GATM,kCAWbP,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,GAchBO,gBAAgB,WAAD,wBAAE,WAAOH,EAAIZ,GAAX,kGAEUC,MAAM,GAAD,OACvBH,EADuB,iBACPc,EADO,4BACef,EADf,2BAFf,WAEPK,EAFO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,QANd,uBAQQH,EAASI,OARjB,cAQPC,EARO,yBASNA,GATM,kCAWbP,EAAS,KAAMQ,SAXF,0DAAF,qDAAC,G","sources":["components/Cast/Cast.jsx","components/services/APIservice.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { APIservise } from 'components/services/APIservice';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castList, setCastList] = useState([]);\n\n  const getMovieCast = async () => {\n    const result = await APIservise.getMovieCredits(movieId);\n    setCastList(result.cast);\n  };\n  useEffect(() => {\n    getMovieCast();\n    //eslint-disable-next-line\n  }, []);\n  return (\n    <section>\n      {castList.length === 0 && (\n        <p> We don't have cast information for the moment</p>\n      )}\n      <ul>\n        {castList.map(({ cast_id, profile_path, name, character }) => (\n          <li key={cast_id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={name}\n              width=\"100\"\n            />\n            <p>{name}</p>\n            <p> Character : {character}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Cast;\n","const API_KEY = 'ea236f9607da5e1c117233fca3100ef0';\nconst API_URL = 'https://api.themoviedb.org/3/';\n\nexport const APIservise = {\n  getTrendingMovies: async setError => {\n    try {\n      const response = await fetch(\n        `${API_URL}trending/all/day?api_key=${API_KEY}`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  searchMovieByQueryAndPage: async (query, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false&year=2001`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  getMovieDetails: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movie = await response.json();\n      return movie;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieCredits: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieReviews: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n};\n"],"names":["movieId","useParams","useState","castList","setCastList","getMovieCast","APIservise","result","cast","useEffect","length","map","cast_id","profile_path","name","character","src","alt","width","API_KEY","API_URL","getTrendingMovies","setError","fetch","response","ok","Error","status","json","movies","message","searchMovieByQueryAndPage","query","getMovieDetails","id","movie","getMovieCredits","getMovieReviews"],"sourceRoot":""}