{"version":3,"file":"static/js/134.e2121930.chunk.js","mappings":"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","sources":["pages/Movies.jsx","services/APIservice.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { APIservise } from '../services/APIservice';\nimport { Container } from '../components/App.styled';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [inputSearchValue, setInputSearchValue] = useState('');\n  const [searchValue, setSearchValue] = useState('');\n  const [searchedMoviesArr, setSearchedMoviedArr] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const searchedMovieName = searchParams.get('movieName');\n  const [error, setError] = useState(null);\n\n  const inputHandle = e => {\n    setInputSearchValue(e.currentTarget.value);\n  };\n\n  const getMoviesArray = async () => {\n    setError(null);\n    const result = await APIservise.searchMovieByQueryAndPage(\n      searchValue,\n      setError\n    );\n    const receivedMoviesArray = await result.results;\n    setSearchedMoviedArr(receivedMoviesArray);\n  };\n\n  const submitHandle = e => {\n    console.log(inputSearchValue);\n    e.preventDefault();\n    setSearchedMoviedArr([]);\n    setSearchParams({ query: inputSearchValue });\n    setSearchValue(inputSearchValue);\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query') || '';\n    if (query !== inputSearchValue) {\n      setSearchValue(query);\n    }\n    if (searchValue === '') return;\n    getMoviesArray();\n    //eslint-disable-next-line\n  }, [searchValue]);\n\n  return (\n    <main>\n      <Container>\n        <form onSubmit={submitHandle}>\n          <label>\n            <input\n              type=\"text\"\n              name=\"movieInputSearch\"\n              value={inputSearchValue}\n              onChange={inputHandle}\n            ></input>\n          </label>\n          <button type=\"submit\">Search</button>\n        </form>\n        {error ? (\n          <h2>{error} Something went wrong</h2>\n        ) : (\n          <ul>\n            {searchedMoviesArr.map(({ id, title, name }) => (\n              <li key={id}>\n                <Link to={`/movies/${id}`}>{title || name}</Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </Container>\n    </main>\n  );\n};\n\nexport default Movies;\n","const API_KEY = 'ea236f9607da5e1c117233fca3100ef0';\nconst API_URL = 'https://api.themoviedb.org/3/';\n\nexport const APIservise = {\n  getTrendingMovies: async setError => {\n    try {\n      const response = await fetch(\n        `${API_URL}trending/all/day?api_key=${API_KEY}`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  searchMovieByQueryAndPage: async (query, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false&year=2001`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n\n  getMovieDetails: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movie = await response.json();\n      return movie;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieCredits: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n  getMovieReviews: async (id, setError) => {\n    try {\n      const response = await fetch(\n        `${API_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n      );\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      const movies = await response.json();\n      return movies;\n    } catch (error) {\n      setError(error.message);\n    }\n  },\n};\n"],"names":["useState","inputSearchValue","setInputSearchValue","searchValue","setSearchValue","searchedMoviesArr","setSearchedMoviedArr","useSearchParams","searchParams","setSearchParams","error","setError","getMoviesArray","APIservise","result","results","receivedMoviesArray","useEffect","query","get","onSubmit","e","console","log","preventDefault","type","name","value","onChange","currentTarget","map","id","title","to","API_KEY","API_URL","getTrendingMovies","fetch","response","ok","Error","status","json","movies","message","searchMovieByQueryAndPage","getMovieDetails","movie","getMovieCredits","getMovieReviews"],"sourceRoot":""}